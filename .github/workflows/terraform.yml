name: Terraform

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Please select terraform action [plan/apply/destroy] ! Warning all action with -auto-approve !'
        required: true
        default: plan
        type: choice
        options:
        - plan
        - apply
        - destroy
      destroy_confirmation:
        description: 'Type "Yes, I want to destroy them all." to confirm destruction !'
        required: false
        default: 'No, keep them forever.'

permissions:
  id-token: write

jobs:
  terraform:
    name: 'Terraform env:dev'
    runs-on: ubuntu-latest
    environment: dev
    env:
      TF_WORKSPACE: dev
      TF_ARM_USE_MSI: true
      TF_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Load environment variable
    # - name: Load environment variables from env file
    #   run: cat env-${{ env.TF_WORKSPACE }}/${{ env.TF_WORKSPACE }}.env | grep -v ^# >> $GITHUB_ENV

    # Pull & update submodules recursively
    - name: Pull & update submodules recursively
      run: |
        git submodule update --init --recursive
        git submodule update --recursive --remote
        chmod 777 cdc-terraform-utilities/github-action/*.sh

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Log in with Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: |
        terraform init -backend-config="env-${{ env.TF_WORKSPACE }}/${{ env.TF_WORKSPACE }}.azurerm.tfbackend"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    # Validates the syntax of the code
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_action == 'plan'
      run: |
        sudo timedatectl set-timezone Asia/Bangkok
        terraform plan -input=false -var-file="env-${{ env.TF_WORKSPACE }}/${{ env.TF_WORKSPACE }}.tfvars" -no-color -out="plan.tmp"
        terraform show plan.tmp > env-${{ env.TF_WORKSPACE }}/02-terraform_latest_plan.ascii_color.txt
        terraform show -no-color plan.tmp > env-${{ env.TF_WORKSPACE }}/01-terraform_latest_plan.txt
        terraform show -no-color plan.tmp > ${GITHUB_WORKSPACE}/plan.out
        rm plan.tmp
        NOW=`date +'%Y-%m-%d %H:%M:%S +07'`
        echo "now=$NOW" >> $GITHUB_OUTPUT
        exit 0

    - name: Create Pull Request
      id: cpr
      if: github.event.inputs.terraform_action == 'plan'
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "${{ env.TF_WORKSPACE }} latest plan ${{ steps.plan.outputs.now }}"
        title: "Terraform Plan env:${{ env.TF_WORKSPACE }} ${{ steps.plan.outputs.now }}"
        body: >
          This PR is auto-generated by
          [create-pull-request](https://github.com/peter-evans/create-pull-request).
          Please review.}
        labels: terraform-${{ env.TF_WORKSPACE }}
        branch: ${{ env.TF_WORKSPACE }}
        delete-branch: true

    # REF: https://github.com/actions/github-script/issues/266#issuecomment-1159681385
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event.inputs.terraform_action == 'plan'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('plan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`hcl\n
          ${plan}
          \`\`\`

          </details>

          **Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`**`;

          github.rest.issues.createComment({
            issue_number: ${{ steps.cpr.outputs.pull-request-number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply (with workflow_dispatch apply -auto-approve)
      if: github.event.inputs.terraform_action == 'apply'
      run: terraform apply -input=false -auto-approve -var-file="env-${{ env.TF_WORKSPACE }}/${{ env.TF_WORKSPACE }}.tfvars"

    - name: Terraform Destroy (with workflow_dispatch destroy -auto-approve)
      if: github.event.inputs.terraform_action == 'destroy' && github.event.inputs.destroy_confirmation == 'Yes, I want to destroy them all.'
      run: terraform destroy -input=false -auto-approve -var-file="env-${{ env.TF_WORKSPACE }}/${{ env.TF_WORKSPACE }}.tfvars"
